// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.28.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// The type `ParsedTrack` is not used by any `pub` functions, thus it is ignored.

String getDbUrl({dynamic hint}) => RustLib.instance.api.getDbUrl(hint: hint);

String getConfigPath({dynamic hint}) =>
    RustLib.instance.api.getConfigPath(hint: hint);

String getCachePath({dynamic hint}) =>
    RustLib.instance.api.getCachePath(hint: hint);

String getDataPath({dynamic hint}) =>
    RustLib.instance.api.getDataPath(hint: hint);

void initialzeApp({dynamic hint}) =>
    RustLib.instance.api.initialzeApp(hint: hint);

void initializeDb({dynamic hint}) =>
    RustLib.instance.api.initializeDb(hint: hint);

Future<void> syncDirectory({required String mountPoint, dynamic hint}) =>
    RustLib.instance.api.syncDirectory(mountPoint: mountPoint, hint: hint);

Future<List<TrackDTO>> getAllTracks({dynamic hint}) =>
    RustLib.instance.api.getAllTracks(hint: hint);

Future<Int32List> getAllTrackIdsSortedByTitle({dynamic hint}) =>
    RustLib.instance.api.getAllTrackIdsSortedByTitle(hint: hint);

Future<Int32List> getAllTrackIdsSortedByArtist({dynamic hint}) =>
    RustLib.instance.api.getAllTrackIdsSortedByArtist(hint: hint);

Future<Int32List> getAllTrackIdsSortedByAlbum({dynamic hint}) =>
    RustLib.instance.api.getAllTrackIdsSortedByAlbum(hint: hint);

Future<Int32List> getAllTrackIdsSortedByDuration({dynamic hint}) =>
    RustLib.instance.api.getAllTrackIdsSortedByDuration(hint: hint);

Future<void> deleteAllTracks({dynamic hint}) =>
    RustLib.instance.api.deleteAllTracks(hint: hint);

Future<String?> pickDirectory({dynamic hint}) =>
    RustLib.instance.api.pickDirectory(hint: hint);

class TrackDTO {
  final int id;
  final String? title;
  final String? artist;
  final String? album;
  final int? number;
  final int? disc;
  final int durationMs;
  final String location;
  final String mountPoint;
  final String? pictureId;

  const TrackDTO({
    required this.id,
    this.title,
    this.artist,
    this.album,
    this.number,
    this.disc,
    required this.durationMs,
    required this.location,
    required this.mountPoint,
    this.pictureId,
  });

  @override
  int get hashCode =>
      id.hashCode ^
      title.hashCode ^
      artist.hashCode ^
      album.hashCode ^
      number.hashCode ^
      disc.hashCode ^
      durationMs.hashCode ^
      location.hashCode ^
      mountPoint.hashCode ^
      pictureId.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is TrackDTO &&
          runtimeType == other.runtimeType &&
          id == other.id &&
          title == other.title &&
          artist == other.artist &&
          album == other.album &&
          number == other.number &&
          disc == other.disc &&
          durationMs == other.durationMs &&
          location == other.location &&
          mountPoint == other.mountPoint &&
          pictureId == other.pictureId;
}
