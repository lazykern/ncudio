//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "track"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq)]
pub struct Model {
    pub id: i32,
    pub title: Option<String>,
    pub album_id: Option<i32>,
    pub artist_id: Option<i32>,
    pub duration: i32,
    pub file_path: String,
    pub picture_id: Option<String>,
    pub mount_point: String,
    pub created_at: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    Title,
    AlbumId,
    ArtistId,
    Duration,
    FilePath,
    PictureId,
    MountPoint,
    CreatedAt,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = i32;
    fn auto_increment() -> bool {
        true
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    Album,
    Artist,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::Integer.def(),
            Self::Title => ColumnType::String(None).def().null(),
            Self::AlbumId => ColumnType::Integer.def().null(),
            Self::ArtistId => ColumnType::Integer.def().null(),
            Self::Duration => ColumnType::Integer.def(),
            Self::FilePath => ColumnType::String(None).def(),
            Self::PictureId => ColumnType::String(None).def().null(),
            Self::MountPoint => ColumnType::String(None).def(),
            Self::CreatedAt => ColumnType::String(None).def().null(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::Album => Entity::belongs_to(super::album::Entity)
                .from(Column::AlbumId)
                .to(super::album::Column::Id)
                .into(),
            Self::Artist => Entity::belongs_to(super::artist::Entity)
                .from(Column::ArtistId)
                .to(super::artist::Column::Id)
                .into(),
        }
    }
}

impl Related<super::album::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Album.def()
    }
}

impl Related<super::artist::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Artist.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
